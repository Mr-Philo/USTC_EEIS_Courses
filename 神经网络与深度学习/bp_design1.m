% bp_design1.m
% 例2.10 用于函数逼近的BP网络的设计
% 该神经网络有两层结构，具有一个双曲正切型的激活函数隐含层，其输出层采用线性函数
% 这里有21组单输入矢量和对应的目标矢量，设计神经网络来实现这对数组的函数关系
P=-1:0.1:1;
T=[-0.96 -0.577 -0.0729 0.377 0.641 0.66 0.461 0.1336...
    -0.201 -0.434 -0.5 -0.393 -0.1647 0.0988 0.3072...
    0.396 0.3449 0.1816 -0.0312 -0.2183 -0.3201];
plot(P,T,'or')          %用红色圆圈画出输入输出点阵
hold on;                %不关闭绘图窗口
% 凭经验选择隐含层神经元为5
% 一般在测试中常取多于训练用的输入矢量来对所设计网络的响应特性进行测试；在函数逼近的过程中，画出网络输出
% 对于输入矢量的图形，可以观察到网络在训练过程中的变化过程。为达到这一目的，定义一个密度较大的第二个输入矢量P2
P2=-1:0.025:1;

% 网络初始化
[R,Q2]=size(P2);      S1=5;       [S2,Q]=size(T);
% W1=rands(S1,R);  %给第一隐含层权值赋（-1,1）间的随机值
% B1=rands(S1,Q2);
% W2=rands(S2,S1);  %给第二隐含层权值赋（-1,1）间的随机值
% B2=rands(S2,Q2);
% 通过测试，用输入矢量P2来计算网络的输出
% A2=purelin(W2*tansig(W1*P2+B1)+B2);

% 定义训练参数并进行训练
net = newcf(minmax(P2),[5,1],{'tansig','purelin'},'traingd');    %创建两层前向回馈网络
net.trainParam.epochs = 7000;           %初始化训练次数
%通过改变此处的7000数值，可以观看到最大训练次数对最后拟合效果的影响
net.trainParam.goal=9.5238e-004;        %mse=9.5238e-004=sse/(Q*S2)=0.02/21
[net,tr]=train(net,P,T);                %进行网络训练
Y=sim(net,P2);                          %用黑色虚线绘出
plot(P2,Y,'--k')                        
%以直线模拟最终的输出效果。这里输入神经网络的是更密集的P2输入矢量