% exp2.m
% 目标：设计实现模糊控制规则为T=int((e+ec)/2)的模糊神经网络控制器
% 输入变量e和ec的变化范围分别是：e = int[-2,2], ec = int[-2,2]，网络设计的目标误差为0.001

% 输入矢量P（维数R×Q）依题意知为2行，即R=2，分别为e矢量和ec矢量；至于Q值，题目并未明确叙述，不妨取Q=10
% 输出矢量为
R = 2; Q = 10;
e = round(rand(1,Q)*4-2);       % 生成[-2,2]间的10个随机整数
ec = round(rand(1,Q)*4-2);
P = [e;ec];                     % 合成输入矢量P
S2 = 1;
T = fix((e+ec)/2);              % 计算输出矢量T（维数为S2×Q，这里S2=1），并依据题目算法利用fix函数对该矩阵去小数取整

% 网络结构：考虑单层隐含层神经网络，即2-S1-1型
% 隐含层采用S型正切激活函数，输出层采用线性激活函数，隐含层节点数为S1，根据后续实验过程确定一个合适的数值
S1 = 10;

% 标准梯度下降法
% W1=rands(S1,R);
% B1=rands(S1,Q);
% W2=rands(S2,S1);
% B2=rands(S2,Q); 
net = newff(minmax(P),[S1,S2],{'logsig','purelin'},'traingd');     % 隐含层logsig，输出层线性，标准梯度下降
% net.LW{2,1}=net.LW{2,1}*0.01;
% net.b{2}=net.b{2}*0.01;
net.performFcn='sse';               %执行函数为误差平方和函数
net.trainParam.epochs = 10000;        %最大训练步长
net.trainParam.goal = 0.001;          %执行函数目标值
net.trainParam.lr = 0.03;       %调整学习速率
[net,tr] = train(net,P,T);       %训练网络
W = net.iw{1,1};     %训练后的网络权值
B = net.b{1};        %训练后的网络偏差

Y = sim(net,P);         %查看训练时间
t=tr.time(end)          %计算均方差
SSE = perform(net,T,Y)

% 记录10.18——（Q=10时）采取10以上的训练值会使结果不收敛，S1越大不收敛现象越严重，暂未知其原因
% Q增大到25，即使S1取5也不收敛了
% 隐含层由tansig双曲正切型改为logsig型，S1取10就收敛了，虽然计算时间增加了很多；
% Q增大到25，不收敛；增大到20，训练时间非常长，满10000次后仍有0.0552的误差，未达到要求
% 但上面一行在赋予随机权值后，很快训练完成（我怀疑之前不收敛都是因为这个）
% 再接上面一行，后来再试发现又不行了（回到和没赋权值一样的速度），估计是因为权值是随机的
