% exp2_1.m
% 目标：设计实现模糊控制规则为T=int((e+ec)/2)的模糊神经网络控制器

% 第一阶段：标准梯度下降法，确定S1值实验。

% 输入矢量P（维数R×Q）依题意知为2行，即R=2，分别为e矢量和ec矢量；至于Q值，题目并未明确叙述，不妨取Q=10
R = 2; Q = 10;
% e = round(rand(1,Q)*4-2);       % 生成[-2,2]间的10个随机整数
% ec = round(rand(1,Q)*4-2);
e = [1,2,-1,2,1,-2,-1,0,2,2];
ec = [-1,2,2,0,1,-1,0,2,1,2];   % 此时为了控制变量，固定输入矢量以比对性能
P = [e;ec];                     % 合成输入矢量P
S2 = 1;
T = fix((e+ec)/2);              % 计算输出矢量T（维数为S2×Q，这里S2=1），并依据题目算法利用fix函数对该矩阵去小数取整

% 网络结构：考虑单层隐含层神经网络，即2-S1-1型
% 隐含层采用S型正切激活函数，输出层采用线性激活函数
% 隐含层节点数为S1，根据后续实验过程确定一个合适的数值
S1 = 10;

% W1=rands(S1,R);
% B1=rands(S1,Q);  # 偏差值列维度不为Q！！！为1！！！
B1 = rands(S1,1);
% W2=rands(S2,S1);
% B2=rands(S2,Q);
B2 = rands(S2,1);
W1 = [-0.0530280140693593,-0.622676046417018;
     -0.694557599123536, -0.425003653867738;
     -0.317750785901781, -0.817773072626930;
      0.214778427536695,  0.152418761326014;
     -0.616509489076405,  0.366726486589306;
      0.476853679953883,  0.0931862291806456;
     -0.514300803363662, -0.148542316257624;
      0.834848684098765,  0.288885562862673;
     -0.461876826627963,  0.295235260345369;
      0.531000033242877,  0.358033508186404];
% B1 = [0.271573421028167,0.540571029607320,0.739882064716015,0.0877718679992781,-0.268367646323658,0.0508088077186715,0.172184134462924,0.366831733935957,0.775541908512708,-0.344869131849590;0.890348226218803,-0.299563973117790,-0.470441947048740,0.442093241159623,0.527009281697627,0.0606884367857268,-0.475709364544385,0.408094860668532,-0.217634009077673,0.342528740903480;-0.582130155147954,0.324019196718269,-0.363851849037882,0.0449906115542043,0.255792759228338,0.722279622786665,-0.911091815443523,-0.115389173233258,0.538228774776591,-0.122710034826089;0.418563405421090,-0.167682820060407,-0.761570917891618,0.987409248241704,0.543960771108490,-0.0302933328957962,0.509866534462358,-0.960844752893363,-0.206416965972767,0.667001191177951;-0.527538846012407,0.683858305382618,0.879658940689841,-0.562646735200732,0.865707140557639,-0.213087277569467,-0.514429284358076,-0.338284239571858,0.617028191774690,0.537708504859230;-0.761207504405389,0.665833638150432,0.291103749945047,-0.788403453499544,0.945481708006028,0.342862279348052,-0.115195373996113,-0.151381006333725,0.510154198014167,-0.665492909010557;0.214607881371269,-0.487118015541705,-0.0410735501022244,-0.780605070953612,-0.615943301144450,0.482515886908413,0.375592170240214,-0.459459153135869,-0.245208910329794,0.723960957404144;-0.0997246060682080,0.226921473625751,0.278633922080217,-0.872817258049789,-0.722251594341689,0.0401049347807736,-0.281543579196279,-0.605892403809089,-0.567962168077211,0.979744307263008;-0.0825490127022643,0.164498329054454,0.0894322210535257,-0.190840008284748,0.392532674165990,-0.304574657444950,0.472680148602404,0.643442369922620,0.580814435933827,0.0288469130114088;0.323889503811304,0.0814786742488194,0.294622960586255,-0.103254175867009,-0.812359946450269,-0.700005492336634,-0.210585049442474,-0.140157181233467,0.898607823699594,0.768562046253911];
W2 = [-0.0409532295795625,0.602695211043905,-0.544314128587916,-0.00381141760722059,0.801704977064010,0.149322438260375,0.690356370108073,0.477280583990804,0.171974071652952,-0.506530948028050];
% B2 = [0.332832434638936,-0.833034372794755,0.251919570343167,0.321889115894685,0.459503710634442,0.781504232650645,0.964606445767213,0.538058170671792,0.162892975750796,0.856626124628376]; 

net = newff(minmax(P),[S1,S2],{'logsig','purelin'},'traingd');     
% 隐含层logsig，输出层线性，标准梯度下降
net.IW{1,1}= W1; %IW 是输入层到第一层的权值矩阵  LW 是中间层和输出层的权值矩阵
net.LW{2,1}= W2;
net.b{1}= B1 ; %b{1} 表示隐含层的阀值矩阵
net.b{2}= B2;
net.performFcn='sse';               %执行函数为误差平方和函数
net.trainParam.epochs = 10000;        %最大训练步长
net.trainParam.goal = 0.001;          %执行函数目标值
net.trainParam.lr = 0.03;       %调整学习速率
[net,tr] = train(net,P,T);       %训练网络

Y = sim(net,P);         %查看训练时间
t=tr.time(end)          %计算均方差
SSE = perform(net,T,Y)

% 记录10.22
